Event Stroming text



## Таск-трекер
1. Таск-трекер должен быть отдельным дашбордом и доступен всем сотрудникам компании UberPopug Inc.

Actor — User
Command — Read tasks list 
Data — Tasks List available for Current User
Event — 

2. Авторизация в таск-трекере должна выполняться через общий сервис авторизации UberPopug Inc (у нас там инновационная система авторизации на основе формы клюва).

Actor — User
Command — Authorize user
Data — JWT token (access + refresh)
Event — Authorization.UserLogin

3. В таск-трекере должны быть только задачи. Проектов, скоупов и спринтов нет, потому что они не умещаются в голове попуга.

Actor — User
Command — 
Data — Tasks List
Event — 

4. Новые таски может создавать кто угодно (администратор, начальник, разработчик, менеджер и любая другая роль). У задачи должны быть описание, статус (выполнена или нет) и рандомно выбранный попуг (кроме менеджера и администратора), на которого заассайнена задача.

Actor — User
Command — Create Task
Data - Task (description, status)
Event — Tasks.TaskCreated

5. Менеджеры или администраторы должны иметь кнопку «заассайнить задачи», которая возьмёт все открытые задачи и рандомно заассайнит каждую на любого из сотрудников (кроме менеджера и администратора) . Не успел закрыть задачу до реассайна — сорян, делай следующую.

Actor — User (roles: Manager, Admin)
Command — Reassign All Tasks
Data - 
Event — Tasks.ReassignAll 

a) Ассайнить задачу можно на кого угодно (кроме менеджера и администратора), это может быть любой существующий аккаунт из системы.

b) Ассайнить задачу на нового попуга, можно только кнопкой «заассайнить задачи», других вариантов нет

c) При нажатии кнопки «заассайнить задачи» все текущие не закрытые задачи должны быть случайным образом перетасованы между каждым аккаунтом в системе

Actor — events "Tasks.TaskCreated", "Tasks.ReassignAll" 
Command — Reassign User for Task/All Tasks
Data - Tasks (NOT IN status "Closed")
Event — Tasks.UserAssigned ???

d) Мы не заморачиваемся на ограничение по нажатию на кнопку «заассайнить задачи». Её можно нажимать хоть каждую секунду.

e) На одного сотрудника может выпасть любое количество новых задач, может выпасть ноль, а может и 10.

f) Создать задачу не заасайненую на пользователя нельзя. Т.е. любая задача должна иметь попуга, который ее делает

Каждый сотрудник должен иметь возможность видеть в отдельном месте список заассайненных на него задач + отметить задачу выполненной.

Actor — User
Command — Get List of Tasks assigned to Me
Data - Tasks (User == Current User)
Event — ???

Actor — User
Command — Change Task Status
Data - Task, NewStatus, User 
Event — Tasks.TaskStatusUpdated



## Аккаунтинг: кто сколько денег заработал

1. Аккаунтинг должен быть в отдельном дашборде и доступным только для администраторов и бухгалтеров.
a) у обычных попугов доступ к аккаунтингу тоже должен быть. Но только к информации о собственных счетах (аудит лог + текущий баланс). У админов и бухгалтеров должен быть доступ к общей статистике по деньгами заработанным (количество заработанных топ-менеджментом за сегодня денег + статистика по дням).

Actor — User
Command — Get Audit log
Data - Audit log list
Event — ???

Actor — User
Command — Get Current balance
Data - Balance
Event — ???

Actor — User (roles: Admin, Accountant)
Command — Get Earned by Top management for Today
Data - Amoung of money 
Event — ???

Actor — User (roles: Admin, Accountant)
Command — Statistics by days
Data - Amoung of money for each Day
Event — ???

2. Авторизация в дешборде аккаунтинга должна выполняться через общий сервис аутентификации UberPopug Inc.

Actor — User (access token)
Command — *any*
Data — User, JWT
Event — *System*.UserAccess ??? (not requred now)

3. У каждого из сотрудников должен быть свой счёт, который показывает, сколько за сегодня он получил денег. У счёта должен быть аудитлог того, за что были списаны или начислены деньги, с подробным описанием каждой из задач.

Actor — User
Command — Get Account
Data — Account, Audit log with Task list 
Event — ???

4. Расценки:
a) цены на задачу определяется единоразово, в момент появления в системе (можно с минимальной задержкой). цены рассчитываются без привязки к сотруднику



b) формула, которая говорит сколько списать денег с сотрудника при ассайне задачи — rand(-10..-20)$

На утонение: Сохранять значение в задачу?

c) формула, которая говорит сколько начислить денег сотруднику для выполненой задачи — rand(20..40)$

На утонение: Сохранять значение в задачу?

d) деньги списываются сразу после ассайна на сотрудника, а начисляются после выполнения задачи.



e) отрицательный баланс переносится на следующий день. Единственный способ его погасить - закрыть достаточное количество задач в течение дня.

5. Дешборд должен выводить количество заработанных топ-менеджментом за сегодня денег.
a) т.е. сумма всех закрытых и заасайненых задач за день с противоположным знаком: (sum(completed task amount) + sum(assigned task fee) * -1

На уточнение: 
- Формула не понятна

6. В конце дня необходимо:
a) считать сколько денег сотрудник получил за рабочий день

Actor — Cron job
Command — Day ended
Data — Account, Audit log 
Event — Accounting.UserDailyTotal

b) отправлять на почту сумму выплаты.

Actor — event "Accounting.UserDailyTotal"
Command — Send Mail to User
Data — User, Account, event 
Event — Notifications.SendMail

7. После выплаты баланса (в конце дня) он должен обнуляться, и в аудитлоге всех операций аккаунтинга должно быть отображено, что была выплачена сумма.

Actor — event "Accounting.UserDailyTotal"
Command — Set balance to 0 for User account
Data — User, Account
Event — Accounting.BalanceUpdated

Actor — event "Accounting.UserDailyTotal"
Command — Log payment audit to User account
Data — User, Account, Audit log 
Event — Accounting.LogAction

8. Дашборд должен выводить информацию по дням, а не за весь период сразу.
a) вообще хватит только за сегодня (всё равно попуги дальше не помнят), но если чувствуете, что успеете сделать аналитику за каждый день недели — будет круто



## Аналитика
1. Аналитика — это отдельный дашборд, доступный только админам.

2. Нужно указывать, сколько заработал топ-менеджмент за сегодня и сколько попугов ушло в минус.

Actor — User (roles: Admin)
Command — Get Analytics for Top management
Data — Total profit of Top management
Event — 

Actor — User (roles: Admin)
Command — Get Analytics for Users
Data — List of Users with negative balance
Event — 

3. Нужно показывать самую дорогую задачу за день, неделю или месяц.

a) самой дорогой задачей является задача с наивысшей ценой из списка всех закрытых задач за определенный период времени

b) пример того, как это может выглядеть:

03.03 — самая дорогая задача — 28$
02.03 — самая дорогая задача — 38$
01.03 — самая дорогая задача — 23$
01-03 марта — самая дорогая задача — 38$

Actor — event "Tasks.TaskClosed"/"Tasks.TaskStatusChanged(Closed)?"
Command — Get Analytics for tasks
Data — Tasks analytics for day, week, month 
Event — ???
